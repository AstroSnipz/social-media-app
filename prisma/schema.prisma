// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id //here we use id as string coz clerk uses string as id
  username String @unique
  avatar String?
  cover String?
  name String?  //first name
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  likes Like[]
  comments Comment[]
  followers Follower[] @relation("UserFollowers")
  followings Follower[] @relation("UserFollowings")
  followRequestsent FollowRequest[] @relation("FollowRequestsSent")
  followRequestRecieved FollowRequest[] @relation("FollowRequestsRecieved")
  blocks Block[] @relation("BlocksSent")
  blockedBy Block[] @relation("BlocksRecieved")
  stories Story[]
}

model Post{
  id Int @id @default(autoincrement())
  desc String
  img String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) //onDelete: Cascade: coz when we delete a user, we hve to delete all corresponding post of that user
  userId String
  comments Comment[]
  likes Like[]
}  

model Comment{
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) 
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade) 
  postId Int
  likes Like[]
}  

model Like{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
  Comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  following User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender User @relation("FollowRequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  reciever User @relation("FollowRequestsRecieved", fields: [recieverId], references: [id], onDelete: Cascade)
  recieverId String
  @@unique([senderId, recieverId]) //this is done coz we should not send multiple follow request
}

model Block{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker User @relation("BlocksSent", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked User @relation("BlocksRecieved", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String
  @@unique([blockerId, blockedId])
}

model Story{
  id Int @id @default(autoincrement())
  img String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique //here its unique coz of one-to-one relationship (i.e., each user can create only one story)
}